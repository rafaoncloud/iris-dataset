clear
cls
clean
exit
ls
ls()
cd()
dir()
cd Documents
cd("Documents")
clear
setwd("~/Documents/machine-learning/iris-dataset/R")
# Read Dataset
df = read.table("../dataset/iris.data", header=TRUE, sep=",")
summary(df)
head(df)
# Prepare the training and testing data
# 4/5 (80%) train
# 1/5 (20%) test
testIdx = which(1:length(df[,1]) %% 5 == 0)
dfTrain = df[-testIdx,]
dfTest = df[testIdx,]
summary(dfTrain)
summary(dfTest)
# Binarize the target classes
dfTrain$setosa = dfTrain$species == 'Iris-setosa'
dfTrain$versicolor = dfTrain$species == 'Iris-versicolor'
dfTrain$virginica =  dfTrain$species == 'Iris-virginica'
# Train Neural Network
library(neuralnet)
formula = setosa + versicolor + virginica ~
sepalLength + sepalWidth + petalLength + petalWidth
nn = neuralnet(formula, data= dfTrain, hidden=c(3))
plot(nn)
summary(nn)
# Predict the probability for test data
prediction = compute(nn, dfTest[1:4])
prediction = prediction$net.result
# Consolidate multiple binary output back to categorical output
maxidx = function(arr){
return(which(arr == max(arr)))
}
idx = apply(prediction, c(1), maxidx)
resultPredicted = c('setosa,','versicolor','virginica')[idx]
table(resultPredicted, dfTest$species) # Confusion Matrix
# Read Dataset
df = read.table("../dataset/iris.data", header=TRUE, sep=",")
summary(df)
head(df)
# Prepare the training and testing data
# 4/5 (80%) train
# 1/5 (20%) test
testIdx = which(1:length(df[,1]) %% 5 == 0)
dfTrain = df[-testIdx,]
dfTest = df[testIdx,]
summary(dfTrain)
summary(dfTest)
# Binarize the target classes
dfTrain$setosa = dfTrain$species == 'Iris-setosa'
dfTrain$versicolor = dfTrain$species == 'Iris-versicolor'
dfTrain$virginica =  dfTrain$species == 'Iris-virginica'
# Train Neural Network
library(neuralnet)
formula = setosa + versicolor + virginica ~
sepalLength + sepalWidth + petalLength + petalWidth
# Read Dataset
df = read.table("../dataset/iris.data", header=TRUE, sep=",")
summary(df)
head(df)
# Prepare the training and testing data
# 4/5 (80%) train
# 1/5 (20%) test
testIdx = which(1:length(df[,1]) %% 5 == 0)
dfTrain = df[-testIdx,]
dfTest = df[testIdx,]
summary(dfTrain)
summary(dfTest)
# Train Neural Network
library(neuralnet)
formula = species ~
sepalLength + sepalWidth + petalLength + petalWidth
tune = tune.svm(formula, data=dfTrain, gamma=10^(-6:-1), cost=10^(1:4))
# Read Dataset
df = read.table("../dataset/iris.data", header=TRUE, sep=",")
summary(df)
head(df)
# Prepare the training and testing data
# 4/5 (80%) train
# 1/5 (20%) test
testIdx = which(1:length(df[,1]) %% 5 == 0)
dfTrain = df[-testIdx,]
dfTest = df[testIdx,]
summary(dfTrain)
summary(dfTest)
# Train Neural Network
library(e1071)
install.packages(e1071)
install.packages("e1071)
"
exit
install.packages("e1071");
install.packages("e1071")
# Read Dataset
df = read.table("../dataset/iris.data", header=TRUE, sep=",")
summary(df)
head(df)
# Prepare the training and testing data
# 4/5 (80%) train
# 1/5 (20%) test
testIdx = which(1:length(df[,1]) %% 5 == 0)
dfTrain = df[-testIdx,]
dfTest = df[testIdx,]
summary(dfTrain)
summary(dfTest)
# Train Neural Network
library(e1071)
formula = species ~
sepalLength + sepalWidth + petalLength + petalWidth
tune = tune.svm(formula, data=dfTrain, gamma=10^(-6:-1), cost=10^(1:4))
summary(tune)
model = svm(formula, dfTraim, method='C-classification',
kernel='radial', probability=T, gamma=0.001, cost= 10000)
model = svm(formula, dfTrain, method='C-classification',
kernel='radial', probability=T, gamma=0.001, cost= 10000)
prediction = predict(model, dfTrain, probability=T)
# Confusion Matrix
table(prediction, dfTest$species)
model = svm(formula, dfTrain, method='C-classification',
kernel='radial', probability=T, gamma=0.001, cost= 10000)
prediction = predict(model, dfTest, probability=T)
# Confusion Matrix
table(prediction, dfTest$species)
# Read Dataset
df = read.table("../dataset/iris.data", header=TRUE, sep=",")
summary(df)
head(df)
# Prepare the training and testing data
# 4/5 (80%) train
# 1/5 (20%) test
testIdx = which(1:length(df[,1]) %% 5 == 0)
dfTrain = df[-testIdx,]
dfTest = df[testIdx,]
summary(dfTrain)
summary(dfTest)
# Train Neural Network
library(e1071)
formula = species ~
sepalLength + sepalWidth + petalLength + petalWidth
tune = tune.svm(formula, data=dfTrain, gamma=10^(-6:-1), cost=10^(1:4))
summary(tune)
model = svm(formula, dfTrain, method='C-classification',
kernel='radial', probability=T, gamma=0.001, cost= 10000)
prediction = predict(model, dfTest, probability=T)
# Confusion Matrix
table(prediction, dfTest$species)
plot(model)
plot(tune)
model = svm(formula, dfTrain, method='C-classification',
kernel='radial', probability=T, gamma=0.001, cost= 10000)
# Read Dataset
df = read.table("../dataset/iris.data", header=TRUE, sep=",")
summary(df)
head(df)
# Prepare the training and testing data
# 4/5 (80%) train
# 1/5 (20%) test
testIdx = which(1:length(df[,1]) %% 5 == 0)
dfTrain = df[-testIdx,]
dfTest = df[testIdx,]
summary(dfTrain)
summary(dfTest)
# Train the Naive Bayes
# Can't handle both categorical and numeric variables,
# altough output must be categorical
library(e1071)
formula = species ~ sepalLength + sepalWidth + petalLength + petalWidth
model = svm(formula, data=dfTrain)
# Test the Naive Bayes
prediction = predict(model, dfTest[1:4], probability=T)
# Test the Naive Bayes
prediction = predict(model, dfTest[1:4])
# Confusion Matrix
table(prediction, dfTest$species)
# Read Dataset
df = read.table("../dataset/iris.data", header=TRUE, sep=",")
summary(df)
head(df)
# Prepare the training and testing data
# 4/5 (80%) train
# 1/5 (20%) test
testIdx = which(1:length(df[,1]) %% 5 == 0)
dfTrain = df[-testIdx,]
dfTest = df[testIdx,]
summary(dfTrain)
summary(dfTest)
# Train the Naive Bayes
# Can't handle both categorical and numeric variables,
# altough output must be categorical
library(e1071)
formula = species ~ sepalLength + sepalWidth + petalLength + petalWidth
model = svm(formula, data=dfTrain)
# Test the Naive Bayes
prediction = predict(model, dfTest[1:4])
# Confusion Matrix
table(prediction, dfTest$species)
summary(model)
plot(model)
# Train the Naive Bayes
# Can't handle both categorical and numeric variables,
# altough output must be categorical
library(e1071)
formula = species ~ sepalLength + sepalWidth + petalLength + petalWidth
model = naiveBayes(formula, data=dfTrain)
summary(model)
plot(model)
# Test the Naive Bayes
prediction = predict(model, dfTest[1:4])
# Confusion Matrix
table(prediction, dfTest$species)
species
# Confusion Matrix
table(prediction, dfTest$species)
# Confusion Matrix
table(dfTest$species, prediction)
model = naiveBayes(formula, data=dfTrain, usekernel = TRUE)
summary(model)
plot(model)
formula = species ~ sepalLength + sepalWidth + petalLength + petalWidth
model = NaiveBayes(formula, data=dfTrain, usekernel = TRUE)
# Confusion Matrix
table(dfTest$species, prediction)
summary(model)
# Read Dataset
df = read.table("../dataset/iris.data", header=TRUE, sep=",")
summary(df)
head(df)
# Prepare the training and testing data
# 4/5 (80%) train
# 1/5 (20%) test
testIdx = which(1:length(df[,1]) %% 5 == 0)
dfTrain = df[-testIdx,]
dfTest = df[testIdx,]
summary(dfTrain)
summary(dfTest)
# Prediction using the Kmeans - Unsupervised Learning
library(class)
formula = species ~ sepalLength + sepalWidth + petalLength + petalWidth
prediction = predict(dfTrain[1:4],dfTest[1:4],dfTrain$species,k=5)
# Read Dataset
df = read.table("../dataset/iris.data", header=TRUE, sep=",")
summary(df)
head(df)
# Prepare the training and testing data
# 4/5 (80%) train
# 1/5 (20%) test
testIdx = which(1:length(df[,1]) %% 5 == 0)
dfTrain = df[-testIdx,]
dfTest = df[testIdx,]
summary(dfTrain)
summary(dfTest)
# Prediction using the Kmeans - Unsupervised Learning
library(class)
formula = species ~ sepalLength + sepalWidth + petalLength + petalWidth
prediction = knn(dfTrain[1:4],dfTest[1:4],dfTrain$species,k=5)
# Confusion Matrix
table(dfTest$species, prediction)
View(df)
# Read Dataset
df = read.table("../dataset/iris.data", header=TRUE, sep=",")
summary(df)
head(df)
# Prepare the training and testing data
# 4/5 (80%) train
# 1/5 (20%) test
testIdx = which(1:length(df[,1]) %% 5 == 0)
dfTrain = df[-testIdx,]
dfTest = df[testIdx,]
summary(dfTrain)
summary(dfTest)
# Prediction using the Kmeans - Unsupervised Learning
library(class)
formula = species ~ sepalLength + sepalWidth + petalLength + petalWidth
prediction = knn(dfTrain[1:2],dfTest[1:2],dfTrain$species,k=5)
# Confusion Matrix
table(dfTest$species, prediction)
# Read Dataset
df = read.table("../dataset/iris.data", header=TRUE, sep=",")
summary(df)
head(df)
# Prepare the training and testing data
# 4/5 (80%) train
# 1/5 (20%) test
testIdx = which(1:length(df[,1]) %% 5 == 0)
dfTrain = df[-testIdx,]
dfTest = df[testIdx,]
summary(dfTrain)
summary(dfTest)
# Prediction using the Kmeans - Unsupervised Learning
library(class)
formula = species ~ sepalLength + sepalWidth + petalLength + petalWidth
prediction = knn(dfTrain[1:4],dfTest[1:4],dfTrain$species,k=5)
# Confusion Matrix
table(dfTest$species, prediction)
# Read Dataset
df = read.table("../dataset/iris.data", header=TRUE, sep=",")
summary(df)
head(df)
# Prepare the training and testing data
# 4/5 (80%) train
# 1/5 (20%) test
testIdx = which(1:length(df[,1]) %% 5 == 0)
dfTrain = df[-testIdx,]
dfTest = df[testIdx,]
summary(dfTrain)
summary(dfTest)
# Prediction using the k-nearest-neightbor - Unsupervised Learning
library(class)
formula = species ~ sepalLength + sepalWidth + petalLength + petalWidth
prediction = knn(dfTrain[1:4],dfTest[1:4],dfTrain$species,k=5)
# Confusion Matrix
table(dfTest$species, prediction)
# Read Dataset
df = read.table("../dataset/iris.data", header=TRUE, sep=",")
summary(df)
head(df)
# Prepare the training and testing data
# 4/5 (80%) train
# 1/5 (20%) test
testIdx = which(1:length(df[,1]) %% 5 == 0)
dfTrain = df[-testIdx,]
dfTest = df[testIdx,]
summary(dfTrain)
summary(dfTest)
# Train the Decision Tree
library(rpart)
formula = species ~ sepalLength + sepalWidth + petalLength + petalWidth
model = rpart(formula, data=dfTrain)
summary(model)
plot(model)
treeModel = rpart(formula, data=dfTrain)
summary(treeModel)
plot(treeModel)
# Test the Naive Bayes
prediction = predict(model, dfTest[1:4])
# Confusion Matrix
table(dfTest$species, prediction)
plot(treeModel)
# Read Dataset
df = read.table("../dataset/iris.data", header=TRUE, sep=",")
summary(df)
head(df)
# Prepare the training and testing data
# 4/5 (80%) train
# 1/5 (20%) test
testIdx = which(1:length(df[,1]) %% 5 == 0)
dfTrain = df[-testIdx,]
dfTest = df[testIdx,]
summary(dfTrain)
summary(dfTest)
# Train the Decision Tree
library(rpart)
formula = species ~ sepalLength + sepalWidth + petalLength + petalWidth
treeModel = rpart(formula, data=dfTrain)
summary(treeModel)
plot(treeModel)
text(treeModel, use.n=T)
# Read Dataset
df = read.table("../dataset/iris.data", header=TRUE, sep=",")
summary(df)
head(df)
# Prepare the training and testing data
# 4/5 (80%) train
# 1/5 (20%) test
testIdx = which(1:length(df[,1]) %% 5 == 0)
dfTrain = df[-testIdx,]
dfTest = df[testIdx,]
summary(dfTrain)
summary(dfTest)
# Train the Decision Tree
library(rpart)
formula = species ~ sepalLength + sepalWidth + petalLength + petalWidth
treeModel = rpart(formula, data=dfTrain)
summary(treeModel)
plot(treeModel)
text(treeModel, use.n=T)
# Predict using the decision tree (Test)
prediction = predict(treeModel, newdata=dfTest[1:4], type='class')
# Confusion Matrix
table(dfTest$species, prediction)
# Confusion Matrix
confusionMatrix(dfTest$species, prediction)
# Confusion Matrix
confusionMatrix(dfTest$species, prediction)
# Confusion Matrix
library(caret)
caret::confusionMatrix(dfTest$species, prediction)
caret::confusionMatrix(data=prediction, reference=dfTest$species)
caret::confusionMatrix(data=prediction, reference=dfTest$species)
caret::confusionMatrix(prediction, dfTest$species)
# Read Dataset
df = read.table("../dataset/iris.data", header=TRUE, sep=",")
summary(df)
head(df)
# Prepare the training and testing data
# 4/5 (80%) train
# 1/5 (20%) test
testIdx = which(1:length(df[,1]) %% 5 == 0)
dfTrain = df[-testIdx,]
dfTest = df[testIdx,]
summary(dfTrain)
summary(dfTest)
# Train 500 trees, random selected attributes
library(randomForest)
install.packages("randomForest")
install.packages("randomForest")
# Train 500 trees, random selected attributes
library(randomForest)
formula = species ~ sepalLength + sepalWidth + petalLength + petalWidth
model = randomForest(formula, data=dfTrain, nTree=500)
summary(treeModel)
summary(model)
plot(model)
text(treeModel, use.n=T)
# Predict using the decision tree (Test)
prediction = predict(model, newdata=dfTest[1:4], type='class')
# Confusion Matrix
library(caret)
caret::confusionMatrix(prediction, dfTest$species)
# Read Dataset
df = read.table("../dataset/iris.data", header=TRUE, sep=",")
summary(df)
head(df)
# Prepare the training and testing data
# 4/5 (80%) train
# 1/5 (20%) test
testIdx = which(1:length(df[,1]) %% 5 == 0)
dfTrain = df[-testIdx,]
dfTest = df[testIdx,]
summary(dfTrain)
summary(dfTest)
# Train 500 trees, random selected attributes
library(randomForest)
formula = species ~ sepalLength + sepalWidth + petalLength + petalWidth
model = randomForest(formula, data=dfTrain, nTree=500)
summary(model)
plot(model)
# Predict using the decision tree (Test)
prediction = predict(model, newdata=dfTest[1:4], type='class')
# Confusion Matrix
library(caret)
caret::confusionMatrix(prediction, dfTest$species)
# Read Dataset
df = read.table("../dataset/iris.data", header=TRUE, sep=",")
summary(df)
head(df)
# Prepare the training and testing data
# 4/5 (80%) train
# 1/5 (20%) test
testIdx = which(1:length(df[,1]) %% 5 == 0)
dfTrain = df[-testIdx,]
dfTest = df[testIdx,]
summary(dfTrain)
summary(dfTest)
# Train 100 trees, random selected attributes
library(randomForest)
formula = species ~ sepalLength + sepalWidth + petalLength + petalWidth
model = randomForest(formula, data=dfTrain, nTree=100)
summary(model)
plot(model)
# Predict using the decision tree (Test)
prediction = predict(model, newdata=dfTest[1:4], type='class')
# Confusion Matrix
library(caret)
caret::confusionMatrix(prediction, dfTest$species)
importance(model)
